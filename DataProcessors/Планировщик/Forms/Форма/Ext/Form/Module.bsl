
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьПланировщикНаСервере();
	
	Планировщик.ТекущиеПериодыОтображения.Добавить(НачалоНедели(ТекущаяДата()), КонецНедели(ТекущаяДата()));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПланировщикНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Ссылка КАК Ссылка,
		|	Задачи.ТекстЗадачи КАК ТекстЗадачи,
		|	Задачи.Выполнено КАК Выполнено,
		|	Задачи.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Задачи КАК Задачи";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
//		НовыйЭлемент = Планировщик.Элементы.Добавить(ВыборкаДетальныеЗаписи.ДатаНачала, ВыборкаДетальныеЗаписи.ДатаОкончания);
		//НовыйЭлемент.Текст = ВыборкаДетальныеЗаписи.Наименование;
		//НовыйЭлемент.Значение = ВыборкаДетальныеЗаписи.Ссылка;
					
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказНаРаботу.Ссылка КАК Ссылка,
		|	ЗаказНаРаботу.ДатаНачала КАК ДатаНачала,
		|	ЗаказНаРаботу.ДатаЗавершения КАК ДатаОкончания,
		|	ЗаказНаРаботу.Заголовок КАК Заголовок
		|ИЗ
		|	Документ.ЗаказНаРаботу КАК ЗаказНаРаботу";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
		НовыйЭлемент = Планировщик.Элементы.Добавить(ВыборкаДетальныеЗаписи.ДатаНачала, ВыборкаДетальныеЗаписи.ДатаОкончания);
		НовыйЭлемент.Текст = ВыборкаДетальныеЗаписи.Заголовок;
		НовыйЭлемент.Значение = ВыборкаДетальныеЗаписи.Ссылка;
					
	КонецЦикла;

	
	
	
		Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МероприятияКалендаря.Календарь КАК Календарь,
		|	МероприятияКалендаря.Статус КАК Статус,
		|	МероприятияКалендаря.ID КАК ID,
		|	МероприятияКалендаря.created КАК created,
		|	МероприятияКалендаря.updated КАК updated,
		|	МероприятияКалендаря.summary КАК Наименование,
		|	МероприятияКалендаря._start КАК ДатаНачала,
		|	МероприятияКалендаря._end КАК ДатаОкончания
		|ИЗ
		|	РегистрСведений.МероприятияКалендаря КАК МероприятияКалендаря";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
		НовыйЭлемент = Планировщик.Элементы.Добавить(ВыборкаДетальныеЗаписи.ДатаНачала, ВыборкаДетальныеЗаписи.ДатаОкончания);
		НовыйЭлемент.Текст = ВыборкаДетальныеЗаписи.Наименование;
		//НовыйЭлемент.Значение = ВыборкаДетальныеЗаписи.Ссылка;
					
	КонецЦикла;

	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикВыбор(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ПараметрыФормы = Новый Структура("Ключ", Элемент.ВыделенныеЭлементы[0].Значение);

	ОткрытьФорму("Справочник.Задачи.ФормаОбъекта", ПараметрыФормы, ,ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Дата, ЗначенияИзмерений)
	
	СтандартнаяОбработка=Ложь;
	Для Каждого Значение из ЗначенияИзмерений Цикл
		Если ТипЗнч(ЗначенияИзмерений.Значение) = Тип("Строка") тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена
		КонецЕсли;	 
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура ПланировщикОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Дата, ЗначенияИзмерений)
	//Если ТипЗнч(ПараметрыПеретаскивания.Значение)=Тип("СправочникСсылка.Задачи") тогда
		
		МинутВИнтервале = 60;
		Минут = Минута(Дата);
		Минут = Цел(Минут/МинутВИнтервале)*МинутВИнтервале;
		ДатаПланировщика = НачалоДня(Дата)+Час(Дата)*3600+Минут*60;
		//
		//ДанныеАвтомобиля = kpp72_ОбщегоНазначения_Сервер.ПолучитьДанныеОбАвтомобилеНаСервере(ПараметрыПеретаскивания.Значение, ТекущаяДата());
		//МассивТелефонов = ПолучитьТелефоныКЛ(ДанныеАвтомобиля.Хозяин);
		//Если МассивТелефонов.Количество() тогда
		//	НомерТелефона = МассивТелефонов[0];
		//КонецЕсли;	
		//
		//ЗаписьЖурнала.Пост 				= Значения.Получить("Пост");
		//ЗаписьЖурнала.Подразделение 	= ПолучитьПодразделениеПоста(ЗаписьЖурнала.Пост);
		//ЗаписьЖурнала.ДатаНачала 		= ДатаПланировщика;
		//ЗаписьЖурнала.Автомобиль 		= ПараметрыПеретаскивания.Значение;
		//ЗаписьЖурнала.ЗаявкаНаРемонт	= Неопределено;
		//ЗаписьЖурнала.ЗаказНаряд		= Неопределено;
		//ЗаписьЖурнала.ДатаОкончания 	= ДатаПланировщика+МинутВИнтервале*60;
		//ЗаписьЖурнала.ТекстЗаписи		= "";
		//ЗаписьЖурнала.Хозяин			= ДанныеАвтомобиля.Хозяин;
		//ЗаписьЖурнала.Контрагент		= ПолучитьКонтрагентаПартнера(ДанныеАвтомобиля.Хозяин);
		//ЗаписьЖурнала.КонтактноеЛицо 	= ПолучитьКонтактноеЛицоПартнера(ДанныеАвтомобиля.Хозяин);
		//ЗаписьЖурнала.НомерТелефона		= НомерТелефона;
		//СоздатьНовуюЗаписьЖурнала();
				
		ЭлементПланировщика = Планировщик.Элементы.Добавить(ДатаПланировщика, ДатаПланировщика+МинутВИнтервале*60);
		//ЭлементПланировщика.ЗначенияИзмерений = ЗначенияИзмерений;
		ЭлементПланировщика.Значение = ПараметрыПеретаскивания.Значение[0];
		////ЭлементПланировщика.Текст = СформироватьТекстЭлементаПланировщика(ЗаписьЖурнала);
		//ЭлементПланировщика.ЦветФона = Объект.ЦветПустогоИнтервала;
    // КонецЕсли;
	
	ОбновитьЗадачу(ПараметрыПеретаскивания.Значение[0], ДатаПланировщика, ДатаПланировщика+МинутВИнтервале*60);

КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	
	СтруктураФормыНастроек = Новый Структура;
	СтруктураФормыНастроек.Вставить("НачалоРабочегоДня", НачалоРабочегоДня);
	СтруктураФормыНастроек.Вставить("КонецРабочегоДня", КонецРабочегоДня);
	
	ОткрытьФорму("Обработка.Планировщик.Форма.ФормаНастроек", СтруктураФормыНастроек,ЭтотОбъект,,,,Новый ОписаниеОповещения("ПослеЗакрытияФормыНастроек",ЭтотОбъект)); 
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыНастроек(Результат, Параметры) Экспорт
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	НачалоРабочегоДня = ВыбранноеЗначение.НачалоРабочегоДня;
	КонецРабочегоДня = ВыбранноеЗначение.КонецРабочегоДня;

	ОбновитьПланировщик();
	
	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьПланировщик()
	
	Планировщик.ЕдиницаПериодическогоВарианта   = ТипЕдиницыШкалыВремени.Час;
	Планировщик.КратностьПериодическогоВарианта = 24;
	//Планировщик.КратностьПериодическогоВарианта
	
	Планировщик.ОтступСНачалаПереносаШкалыВремени = Час(НачалоРабочегоДня);
	Планировщик.ОтступСКонцаПереносаШкалыВремени = ?(Час(КонецРабочегоДня) = 0, 0, 24 - Час(КонецРабочегоДня));
	Планировщик.ОтображатьТекущуюДату = Истина;
	Планировщик.ОтображатьПеренесенныеЗаголовки = Истина;
	//Планировщик.ПоведениеЭлементовПриНедостаткеМеста.ОтображатьВсеЭлементы;
	//Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗадачу(Задача, ДатаНачала, ДатаОкончания)
	
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	ЗадачаОбъект.ДатаНачала = ДатаНачала;
	ЗадачаОбъект.ДатаОкончания = ДатаОкончания;
	ЗадачаОбъект.Записать();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	ОбновитьЗадачу(Элемент.ВыделенныеЭлементы[0].Значение,Элемент.ВыделенныеЭлементы[0].Начало,Элемент.ВыделенныеЭлементы[0].Конец);
КонецПроцедуры
